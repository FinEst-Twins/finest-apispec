# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.noise_observation import NoiseObservation
from swagger_server import util


class NoiseSensor(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, sensor: str=None, observations: List[NoiseObservation]=None):  # noqa: E501
        """NoiseSensor - a model defined in Swagger

        :param sensor: The sensor of this NoiseSensor.  # noqa: E501
        :type sensor: str
        :param observations: The observations of this NoiseSensor.  # noqa: E501
        :type observations: List[NoiseObservation]
        """
        self.swagger_types = {
            'sensor': str,
            'observations': List[NoiseObservation]
        }

        self.attribute_map = {
            'sensor': 'sensor',
            'observations': 'observations'
        }

        self._sensor = sensor
        self._observations = observations

    @classmethod
    def from_dict(cls, dikt) -> 'NoiseSensor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NoiseSensor of this NoiseSensor.  # noqa: E501
        :rtype: NoiseSensor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensor(self) -> str:
        """Gets the sensor of this NoiseSensor.


        :return: The sensor of this NoiseSensor.
        :rtype: str
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor: str):
        """Sets the sensor of this NoiseSensor.


        :param sensor: The sensor of this NoiseSensor.
        :type sensor: str
        """
        if sensor is None:
            raise ValueError("Invalid value for `sensor`, must not be `None`")  # noqa: E501

        self._sensor = sensor

    @property
    def observations(self) -> List[NoiseObservation]:
        """Gets the observations of this NoiseSensor.


        :return: The observations of this NoiseSensor.
        :rtype: List[NoiseObservation]
        """
        return self._observations

    @observations.setter
    def observations(self, observations: List[NoiseObservation]):
        """Sets the observations of this NoiseSensor.


        :param observations: The observations of this NoiseSensor.
        :type observations: List[NoiseObservation]
        """

        self._observations = observations
